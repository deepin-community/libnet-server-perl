Description: fix errors in POD
Bug: https://rt.cpan.org/Ticket/Display.html?id=85052
Forwarded: https://rt.cpan.org/Ticket/Display.html?id=85052 [not latest version]
Author: intrigeri <intrigeri@debian.org>
Reviewed-By: Xavier Guimard <x.guimard@free.fr>
 gregor herrmann <gregoa@debian.org>
Last-Update: 2017-10-26

--- a/lib/Net/Server.pod
+++ b/lib/Net/Server.pod
@@ -194,7 +194,7 @@
 waiting for connections.  Once a connection is received, the
 Net::Server will accept on the socket and will store the result (the
 client connection) in $self-E<gt>{server}-E<gt>{client}.  This
-property is a Socket blessed into the the IO::Socket classes.  UDP
+property is a Socket blessed into the IO::Socket classes.  UDP
 servers are slightly different in that they will perform a B<recv>
 instead of an B<accept>.
 
@@ -374,7 +374,7 @@
 validation.
 
 Some emails have asked why we use this "template" method.  The idea is
-that you are creating the the data structure to store the values in,
+that you are creating the data structure to store the values in,
 and you are also creating a way to get the values into the data
 structure.  The template is the way to get the values to the servers
 data structure.  One of the possibilities (that probably isn't used
@@ -633,7 +633,7 @@
 L<Net::Server::Proto>. See L<IO::Socket>.  Configuration passed to new
 or run may be either a scalar containing a single host or an arrayref
 of hosts - if the hosts array is shorter than the ports array, the
-last host entry will be used to augment the hosts arrary to the size
+last host entry will be used to augment the hosts array to the size
 of the ports array.
 
 If an IPv4 address is passed, an IPv4 socket will be created.  If an
@@ -664,7 +664,7 @@
     host => '*/IPv*',     # same (any IPv6 or IPv4)
 
     ipv  => 4,
-    host => '*',          # any local IPv4 interfaces interfaces
+    host => '*',          # any local IPv4 interfaces
 
 
 =item proto
@@ -677,7 +677,7 @@
 passed to new or run may be either a scalar containing a single proto
 or an arrayref of protos - if the protos array is shorter than the
 ports array, the last proto entry will be used to augment the protos
-arrary to the size of the ports array.
+array to the size of the ports array.
 
 Additionally the proto may also contain the ipv specification.
 
@@ -845,13 +845,13 @@
 
 =item user
 
-Userid or username to become after the bind process has occured.
+Userid or username to become after the bind process has occurred.
 Defaults to "nobody."  If you would like the server to run as root,
 you will have to specify C<user> equal to "root".
 
 =item group
 
-Groupid or groupname to become after the bind process has occured.
+Groupid or groupname to become after the bind process has occurred.
 Defaults to "nobody."  If you would like the server to run as root,
 you will have to specify C<group> equal to "root".
 
@@ -894,7 +894,7 @@
 
 Boolean.  Default undef (not set).  If set, the parent will not
 attempt to close child processes if the parent receives a SIG HUP.
-The parent will rebind the the open port and begin tracking a fresh
+The parent will rebind the open port and begin tracking a fresh
 set of children.
 
 Children of a Fork server will exit after their current request.
@@ -1158,12 +1158,12 @@
 
 =item C<$self-E<gt>bind>
 
-This method actually binds to the inialized sockets (or rebinds if the
+This method actually binds to the initialized sockets (or rebinds if the
 server has been HUPed).
 
 =item C<$self-E<gt>post_bind>
 
-During this method priveleges are dropped.  The INT, TERM, and QUIT
+During this method privileges are dropped.  The INT, TERM, and QUIT
 signals are set to run server_close.  Sig PIPE is set to IGNORE.  Sig
 CHLD is set to sig_chld.  And sig HUP is set to call sig_hup.
 
@@ -1323,11 +1323,11 @@
 =item C<$self-E<gt>pre_loop_hook()>
 
 This hook occurs after chroot, change of user, and change of group has
-occured.  It allows for preparation before looping begins.
+occurred.  It allows for preparation before looping begins.
 
 =item C<$self-E<gt>can_read_hook()>
 
-This hook occurs after a socket becomes readible on an
+This hook occurs after a socket becomes readable on an
 accept_multi_port request (accept_multi_port is used if there are
 multiple bound ports to accept on, or if the "multi_port"
 configuration parameter is set to true).  This hook is intended to
@@ -1337,7 +1337,7 @@
 handles or adding them to the IO::Socket.  Care must be used in how
 much occurs during the can_read_hook as a long response time will
 result in the server being susceptible to DOS attacks.  A return value
-of true indicates that the Server should not pass the readible handle
+of true indicates that the Server should not pass the readable handle
 on to the post_accept and process_request phases.
 
 It is generally suggested that other avenues be pursued for sending
@@ -1470,7 +1470,7 @@
 Called when log_file is set to 'Sys::Syslog' and an error occurs while
 writing to the syslog.  It is passed two arguments, the value of $@,
 and an arrayref containing the arguments that were passed to the log
-method when the error occured.
+method when the error occurred.
 
 =item C<$self-E<gt>log>
 
@@ -1657,7 +1657,7 @@
 
 Thanks to Carl Lewis for suggesting "-" in user names.
 
-Thanks to Slaven Rezic for suggesing Reuse => 1 in Proto::UDP.
+Thanks to Slaven Rezic for suggesting Reuse => 1 in Proto::UDP.
 
 Thanks to Tim Watt for adding udp_broadcast to Proto::UDP.
 
@@ -1697,7 +1697,7 @@
 systems supporting flock.  Rob also suggested not closing STDIN/STDOUT
 but instead reopening them to /dev/null to prevent spurious warnings.
 Also suggested short circuit in post_accept if in UDP.  Also for
-cleaning up some of the child managment code of PreFork.
+cleaning up some of the child management code of PreFork.
 
 Thanks to Mark Martinec for suggesting additional log messages for
 failure during accept.
@@ -1717,7 +1717,7 @@
 Thanks to Steven Lembark for pointing out that no_client_stdout wasn't
 working with the Multiplex server.
 
-Thanks to Peter Beckman for suggesting allowing Sys::SysLog keyworks
+Thanks to Peter Beckman for suggesting allowing Sys::SysLog keywords
 be passed through the ->log method and for suggesting we allow more
 types of characters through in syslog_ident.  Also to Peter Beckman
 for pointing out that a poorly setup localhost will cause tests to
@@ -1782,7 +1782,7 @@
 IPv6 going.
 
 Thanks to the munin developers and Nicolai Langfeldt for hosting the
-development verion of Net::Server for so long and for fixes to the
+development version of Net::Server for so long and for fixes to the
 allow_deny checking for IPv6 addresses.
 
 Thanks to Tatsuhiko Miyagawa for feedback, and for suggesting adding
--- a/lib/Net/Server/PSGI.pm
+++ b/lib/Net/Server/PSGI.pm
@@ -202,7 +202,7 @@
 Net::Server::PSGI takes Net::Server::HTTP one level farther.  It
 begins with base type MultiType defaulting to Net::Server::Fork.  It
 is easy to change it to any of the other Net::Server flavors by
-passing server_type => $other_flavor in the server configurtation.
+passing server_type => $other_flavor in the server configuration.
 The port has also been defaulted to port 80 - but could easily be
 changed to another through the server configuration.  You can also
 very easily add ssl by including, proto=>"ssl" and provide a
--- a/lib/Net/Server/PreFork.pm
+++ b/lib/Net/Server/PreFork.pm
@@ -636,7 +636,7 @@
 
 Process flow follows Net::Server until the loop phase.  At this point
 C<min_servers> are forked and wait for connections.  When a child
-accepts a connection, finishs processing a client, or exits, it relays
+accepts a connection, finishes processing a client, or exits, it relays
 that information to the parent, which keeps track and makes sure there
 are enough children to fulfill C<min_servers>, C<min_spare_servers>,
 C<max_spare_servers>, and C<max_servers>.
@@ -652,7 +652,7 @@
 
 This hook occurs at the top of run_n_children which is called each
 time the server goes to start more child processes.  This gives the
-parent to do a little of its own accountting (as desired).  Idea for
+parent to do a little of its own accounting (as desired).  Idea for
 this hook came from James FitzGibbon.
 
 =item C<$self-E<gt>parent_read_hook()>
--- a/lib/Net/Server/Daemonize.pm
+++ b/lib/Net/Server/Daemonize.pm
@@ -309,7 +309,7 @@
 
 =item check_pid_file
 
-Arguments are pid_file (full path to pid_file).  Checks for existance
+Arguments are pid_file (full path to pid_file).  Checks for existence
 of pid_file.  If file exists, open it and determine if the process
 that created it is still running.  This is done first by checking for
 a /proc file system and second using a "ps" command (BSD syntax).  (If
--- a/lib/Net/Server/Proto.pm
+++ b/lib/Net/Server/Proto.pm
@@ -411,7 +411,7 @@
 
 In addition to being able to specify IPV as a separate parameter, ipv may
 also be passed as a part of the host, as part of the port, as part of the protocol
-or may be specified via $ENV{'IPV'}.  The order of precidence is as follows:
+or may be specified via $ENV{'IPV'}.  The order of precedence is as follows:
 
      1) Explicit IPv4 or IPv6 address - wins
      2) ipv specified in port
--- a/lib/Net/Server/HTTP.pm
+++ b/lib/Net/Server/HTTP.pm
@@ -660,7 +660,7 @@
 Net::Server::HTTP begins with base type MultiType defaulting to
 Net::Server::Fork.  It is easy to change it to any of the other
 Net::Server flavors by passing server_type => $other_flavor in the
-server configurtation.  The port has also been defaulted to port 80 -
+server configuration.  The port has also been defaulted to port 80 -
 but could easily be changed to another through the server
 configuration.  You can also very easily add ssl by including,
 proto=>"ssl" and provide a SSL_cert_file and SSL_key_file.
@@ -745,7 +745,7 @@
 =item c<log_http_request>
 
 Called at the end of post_process_request.  The default method looks
-for the default access_log_format and checks if logging was initilized
+for the default access_log_format and checks if logging was initialized
 during _init_access_log.  If both of these exist, the http_request_info
 is formatted using http_log_format and the result is logged.
 
--- a/lib/Net/Server/PreForkSimple.pm
+++ b/lib/Net/Server/PreForkSimple.pm
@@ -435,16 +435,16 @@
 IPC::Semaphore (thanks to Bennett Todd) for giving some sample code.
 The pipe option reads on a pipe to choose the next.  the flock option
 should be the most bulletproof while the pipe option should be the
-most portable.  (Flock is able to reliquish the block if the process
+most portable.  (Flock is able to relinquish the block if the process
 dies between accept on the socket and reading of the client connection
 - semaphore and pipe do not).  An option of none will not perform
 any serialization.  If "none" is passed and there are multiple ports
-then a the default serialization will be used insted of "none."
+then a the default serialization will be used instead of "none."
 
 =item lock_file
 
 Filename to use in flock serialized accept in order to serialize the
-accept sequece between the children.  This will default to a generated
+accept sequence between the children.  This will default to a generated
 temporary filename.  If default value is used the lock_file will be
 removed when the server closes.
 
@@ -513,7 +513,7 @@
 
 Process flow follows Net::Server until the loop phase.  At this point
 C<max_servers> are forked and wait for connections.  When a child
-accepts a connection, finishs processing a client, or exits, it relays
+accepts a connection, finishes processing a client, or exits, it relays
 that information to the parent, which keeps track and makes sure there
 are always C<max_servers> running.
 
@@ -528,14 +528,14 @@
 
 This hook occurs at the top of run_n_children which is called each
 time the server goes to start more child processes.  This gives the
-parent to do a little of its own accountting (as desired).  Idea for
+parent to do a little of its own accounting (as desired).  Idea for
 this hook came from James FitzGibbon.
 
 =item C<$self-E<gt>child_init_hook()>
 
-This hook takes place immeditately after the child process forks from
+This hook takes place immediately after the child process forks from
 the parent and before the child begins accepting connections.  It is
-intended for any addiotional chrooting or other security measures.  It
+intended for any additional chrooting or other security measures.  It
 is suggested that all perl modules be used by this point, so that the
 most shared memory possible is used.
 
--- a/lib/Net/Server/SIG.pm
+++ b/lib/Net/Server/SIG.pm
@@ -133,7 +133,7 @@
 signal will short circuit the select.  Using this concept,
 Net::Server::SIG does the least work possible (changing one bit from 0
 to 1).  And depends upon the actual processing of the signals to take
-place immediately after the the select call via the "check_sigs"
+place immediately after the select call via the "check_sigs"
 function.  See the example shown above and also see the sigtest.pl
 script located in the examples directory of this distribution.
 
@@ -157,9 +157,9 @@
 
 =item C<check_sigs()>
 
-Checks to see if any registered signals have occured.  If so, it will
+Checks to see if any registered signals have occurred.  If so, it will
 play the registered code ref for that signal.  Return value is array
-containing any SIGNAL names that had occured.
+containing any SIGNAL names that had occurred.
 
 =item C<sig_is_registered($SIG)>
 
--- a/lib/Net/Server/Log/Log/Log4perl.pm
+++ b/lib/Net/Server/Log/Log/Log4perl.pm
@@ -97,7 +97,7 @@
 
 =item log4perl_poll
 
-If set to a value, will initialise with Log::Log4perl::init_and_watch
+If set to a value, will initialize with Log::Log4perl::init_and_watch
 with this polling value. This can also be the string "HUP" to re-read
 the log4perl_conf when a HUP signal is received. If set to 0, no
 polling is done. See L<Log::Log4perl> for more details.
--- a/lib/Net/Server/Proto/TCP.pm
+++ b/lib/Net/Server/Proto/TCP.pm
@@ -184,7 +184,7 @@
 =item C<object>
 
 Returns an object with parameters suitable for eventual creation of
-a IO::Socket::INET object listining on UDP.
+a IO::Socket::INET object listening on UDP.
 
 =item C<log_connect>
 
--- a/lib/Net/Server/Proto/UNIX.pm
+++ b/lib/Net/Server/Proto/UNIX.pm
@@ -132,11 +132,11 @@
 SOCK_STREAM socket type.  See L<Net::Server::Proto>.
 
 Any sockets created during startup will be chown'ed to the user and
-group specified in the starup arguments.
+group specified in the startup arguments.
 
 =head1 PARAMETERS
 
-The following paramaters may be specified in addition to normal
+The following parameters may be specified in addition to normal
 command line parameters for a Net::Server.  See L<Net::Server> for
 more information on reading arguments.
 
--- a/lib/Net/Server/Proto/SSL.pm
+++ b/lib/Net/Server/Proto/SSL.pm
@@ -235,7 +235,7 @@
 
 =head1 SYNOPSIS
 
-Until this release, it was preferrable to use the Net::Server::Proto::SSLEAY
+Until this release, it was preferable to use the Net::Server::Proto::SSLEAY
 module.  Recent versions include code that overcomes original limitations.
 
 See L<Net::Server::Proto>.
@@ -299,7 +299,7 @@
 If you know that your server will only need IPv4 (which is the default
 for Net::Server), you can load IO::Socket::SSL in inet4 mode which
 will prevent it from using Socket6 and IO::Socket::INET6 since they
-would represent additional and unsued overhead.
+would represent additional and unused overhead.
 
     use IO::Socket::SSL qw(inet4);
     use base qw(Net::Server::Fork);
--- a/lib/Net/Server/Proto/SSLEAY.pm
+++ b/lib/Net/Server/Proto/SSLEAY.pm
@@ -519,7 +519,7 @@
 
 This module has reliably been used in situations receiving millions of
 hits on a single box per day.  If anybody has any successes or ideas
-for improvment under SSLEAY, please email <paul@seamons.com>.
+for improvement under SSLEAY, please email <paul@seamons.com>.
 
 Protocol module for Net::Server.  This module implements a secure
 socket layer over tcp (also known as SSL).  See L<Net::Server::Proto>.
--- a/lib/Net/Server/Proto/UNIXDGRAM.pm
+++ b/lib/Net/Server/Proto/UNIXDGRAM.pm
@@ -88,11 +88,11 @@
 SOCK_DGRAM socket type.  See L<Net::Server::Proto>.
 
 Any sockets created during startup will be chown'ed to the user and
-group specified in the starup arguments.
+group specified in the startup arguments.
 
 =head1 PARAMETERS
 
-The following paramaters may be specified in addition to normal
+The following parameters may be specified in addition to normal
 command line parameters for a Net::Server.  See L<Net::Server> for
 more information on reading arguments.
 
--- a/lib/Net/Server/Proto/UDP.pm
+++ b/lib/Net/Server/Proto/UDP.pm
@@ -117,7 +117,7 @@
 
 =head1 PARAMETERS
 
-The following paramaters may be specified in addition to
+The following parameters may be specified in addition to
 normal command line parameters for a Net::Server.  See
 L<Net::Server> for more information on reading arguments.
 
@@ -155,7 +155,7 @@
 =item C<object>
 
 Returns an object with parameters suitable for eventual creation of
-a IO::Socket::INET object listining on UDP.
+a IO::Socket::INET object listening on UDP.
 
 =item C<connect>
 
--- a/lib/Net/Server/Multiplex.pm
+++ b/lib/Net/Server/Multiplex.pm
@@ -311,7 +311,7 @@
 deamonization and pid tracking, and restartability -SIGHUP) and some
 nice features of IO::Multiplex (automatic buffered IO and
 per-file-handle objects) and combines them for an easy-to-use
-interace.
+interface.
 
 See examples/samplechat.pl distributed with Net::Server for a simple
 chat server that uses several of these features.
